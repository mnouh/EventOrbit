<?php

class User extends CActiveRecord {

    /**
     * The followings are the available columns in table 'tbl_user':
     * @var integer $id
     * @var string $username
     * @var string $password
     * @var string $salt
     * @var string $email
     * @var string $profile
     */
    //public $confirmEmail;
    //public $confirmPassword;
    public $domain;

    /**
     * Returns the static model of the specified AR class.
     * @return CActiveRecord the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return '{{user}}';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('firstName, lastName, gender, zip_code, terms', 'required', 'message' => '&#10006; &nbsp; A {attribute} is required.', 'on' => 'signup'),
            array('terms', 'required', 'message' => '&#10006; &nbsp; Please accept our {attribute} .', 'on' => 'signup'),
            array('email, password', 'required', 'message' => '&#10006; &nbsp; A {attribute} is required.', 'on' => 'signup'),
            array('password', 'length', 'max' => 128, 'min' => 5, 'on' => 'signup'),
            //array('confirmPassword', 'compare', 'compareAttribute'=>'password', 'on' => 'signup'),
            array('profile_image', 'safe', 'on' => 'signup'),
            array('email', 'email', 'on' => 'signup'),
            //array('confirmEmail', 'compare', 'compareAttribute'=>'email', 'on' => 'signup'),
            array('email', 'checkuser', 'on' => 'signup'),
                //array('verify_code', ''),
        );
    }

    public function checkuser($attribute, $params) {


        $user = $this->find('LOWER(email)=?', array(strtolower($this->email)));
        if ($user != null) {

            $this->addError('email', '<b>&#10006;</b> &nbsp; This email already exists.');
            //$this->addError('confirmEmail', '<b>&#10006;</b> &nbsp; This email already exists.');
        }
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'posts' => array(self::HAS_MANY, 'Post', 'author_id'),
            'reviews' => array(self::HAS_MANY, 'Reviews', 'user_id'),
            'reviewsCount' => array(self::STAT, 'Reviews', 'user_id'),
            'school' => array(self::BELONGS_TO, 'School', 'school_id'),
            'contacts' => array(self::HAS_MANY, 'Contacts', 'user_id'),
            'rsvps' => array(self::HAS_MANY, 'Rsvps', 'user_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'Id',
            'username' => 'Username',
            'password' => 'Password',
            'email' => 'Email',
            'profile_image' => 'Profile Image',
        );
    }

    /**
     * Checks if the given password is correct.
     * @param string the password to be validated
     * @return boolean whether the password is valid
     */
    public function validatePassword($password) {
        return $this->hashPassword($password, $this->salt) === $this->password;
    }

    /**
     * Generates the password hash.
     * @param string password
     * @param string salt
     * @return string hash
     */
    public function hashPassword($password, $salt) {
        return md5($salt . $password);
    }

    /*
     * Generates the verification code for the user
     */

    public function verifyCode($email, $firstName) {


        return md5($email . $firstName);
    }

    /**
     * Generates a salt that can be used to generate a password hash.
     * @return string the salt
     */
    public function generateSalt() {
        return uniqid('', true);
    }

    protected function beforeSave() {

        if ($this->isNewRecord) {

            $salt = $this->generateSalt();
            $this->salt = $salt;
            $pass = $this->hashPassword($this->password, $salt);
            $this->password = $pass;
            $this->username = $this->email;
            $this->verify_code = $this->verifyCode($this->email, $this->firstName);
        }


        return parent::beforeSave();
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('username', $this->username, true);

        $criteria->compare('email', $this->email);

        return new CActiveDataProvider('User', array(
                    'criteria' => $criteria,
                    'sort' => array(
                        'defaultOrder' => 'email, id DESC',
                    ),
                ));
    }

}